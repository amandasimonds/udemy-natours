.form{
    &__group:not(:last-child){
    margin-bottom: 2rem;
    }

    &__input{
        font-size: 1.5rem;
        //Automatically inherit the font styles.
        //Most elements automatically inherit, but the form element does not
        font-family: inherit;
        color: inherit;
        padding: 1.5rem 2rem;
        border-radius: 2px;
        background-color: rgba($color-white, .5);
        border: none;
        //trick to make sure the box doesn't change when we add the border on focus
        border-radius: 3px solid transparent;
        display: block;
        width: 90%;

        &:focus {
            outline: none;
            box-shadow: 0 1rem 2rem rgba($color-black, .2);
            border-bottom: 3px solid $color-primary;
        }

        //represents things that aren't on the webpage(like placeholders)
        &::-webkit-input-placeholder{
            color: $color-grey-dark-2;
        }

        &:focus:invalid{
            border-bottom: 3px solid $color-secondary-dark;
        }
    }

    &__label{
        font-size: 1.2rem;
        font-weight: 700;
        margin-left: 2rem;
        margin-top: .7rem;
        display: block;
        transition: all .2s;
    }

    // + is adjacent sibling selector (input and label are adjacent siblings) ~ is used when they are siblings, but not adjacent
    &__input:placeholder-shown + &__label {
        //we added opactiy because we want to add an animation effect
        opacity: 0;
        visibility: hidden;
        transform: translateY(-4rem);
    }

    &__radio-group {
        width: 49%;
        display: inline-block;
    }
    &__radio-input{
        display: none;
    }
    
    &__radio-label {
        font-size: $default-font-size;
        cursor: pointer;
        position: relative;
        padding-left: 4.5rem;
    }

    &__radio-button {
        height: 3rem;
        width: 3rem;
        border: 5px solid $color-primary;
        border-radius: 50%;
        //to make the circle work, you have to make it a block element
        display: inline-block;
        position: absolute;
        left:0;
        top:-.4rem;

        &::after {
            content: "";
            display: block;
            height:1.3rem;
            width: 1.3rem;
            border-radius: 50%;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: $color-primary;
            opacity: 0;
            transition: opacity .2s
        }
    }

    //when we hit the label element, the radio input becomes checked, so the "checked" pseudo class becomes available when we hit it
    //then we select the sibling and child of that label element, bc that is what we want to change whenever that radio button is selected
    //the same works for checkboxes!
    &__radio-input:checked ~ &__radio-label &__radio-button::after{
        opacity: 1;
    }

}